Tests for parse_file
--------------------

>>> from s1 import *

>>> f = open("*doctest*parse_file*", "w")
>>> f.write("4\n.@@.\n.@@.\n..@.")
>>> f.close()
>>> parse_file("*doctest*parse_file*")
[(4, ['.@@.', '.@@.', '..@.'])]

>>> f = open("*doctest*parse_file*", "w")
>>> f.write("4\n.@@.\n.@@.\n..@.\n\n3\n.@@.\n.@@.\n..@.")
>>> f.close()
>>> parse_file("*doctest*parse_file*")
[(4, ['.@@.', '.@@.', '..@.']), (3, ['.@@.', '.@@.', '..@.'])]

>>> f = open("*doctest*parse_file*", "w")
>>> f.write("4\n.@@.\n.@@.\n..@.\n\n\n3\n.@@.\n.@@.\n..@.")
>>> f.close()
>>> parse_file("*doctest*parse_file*")
[(4, ['.@@.', '.@@.', '..@.']), (3, ['.@@.', '.@@.', '..@.'])]

>>> import os
>>> os.remove("*doctest*parse_file*")

Tests for identify (enumerating)
------------------------------

>>> identify((1, ['.@@.', '.@@.', '.@@.']))
(1, [[0, 1, 2, 0], [0, 3, 4, 0], [0, 5, 6, 0]])

>>> identify((1, ['@..', '.@.', '..@']))
(1, [[1, 0, 0], [0, 2, 0], [0, 0, 3]])

>>> identify((1, ['@@@@@@', '@@@@@@', '@@@@@@', '@@@@@@', '@@@@@@']))
(1, [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30]])

Tests for join_horizontally (horizontal joins)
-----------------------------------

join_horizontally should join as many greenhouses as possible but it
must make sure to leave enough wiggle room for solve3 and others.

For example:

..@@@@.. should be  ..1122..
@@@@@@.. joined     334455..
..@@.... like this: ..66....
..@@....            ..77....

>>> join_horizontally((1, [[0, 0, 1, 2, 3, 4, 0, 0], [5, 6, 7, 8, 9,10, 0, 0], [0, 0,11,12, 0, 0, 0, 0], [0, 0,13,14, 0, 0, 0, 0]]))
(1, [[0, 0, 1, 1, 3, 3, 0, 0], [5, 5, 7, 7, 9, 9, 0, 0], [0, 0, 11, 11, 0, 0, 0, 0], [0, 0, 13, 13, 0, 0, 0, 0]])

The simplest possible case, 2 identical rows:

.@@. turns into: .11.
.@@.             .22.

>>> join_horizontally((1, [[0, 1, 2, 0], [0, 3, 4, 0]]))
(1, [[0, 1, 1, 0], [0, 3, 3, 0]])

A more complicated one (diagonal):

@@.. should not be converted at all: 12..
.@@.                                 .34.
..@@                                 ..56

>>> join_horizontally((1, [[1, 2, 0, 0], [0, 3, 4, 0], [0, 0, 5, 6]]))
(1, [[1, 2, 0, 0], [0, 3, 4, 0], [0, 0, 5, 6]])

Tests for join_vertically (vertical joins)
---------------------------------

join_vertically builds on the results of solve2 but works vertically
instead of horizontally. The same test cases as for join_horizontally
are re-used here

..@@@@.. should be  ..1122..
@@@@@@.. joined     334455..
..@@.... like this: ..66....
..@@....            ..66....

>>> join_vertically((1, [[0, 0, 1, 1, 3, 3, 0, 0], [5, 5, 7, 7, 9, 9, 0, 0], [0, 0, 11, 11, 0, 0, 0, 0], [0, 0, 13, 13, 0, 0, 0, 0]]))
(1, [[0, 0, 1, 1, 3, 3, 0, 0], [5, 5, 7, 7, 9, 9, 0, 0], [0, 0, 11, 11, 0, 0, 0, 0], [0, 0, 11, 11, 0, 0, 0, 0]])

However, if we remove the two leftmost greenhouses

..@@@@.. it should  ..1122..
@@@@@@.. be joined  ..1122..
..@@.... like this  ..66....
..@@.... instead    ..66....

>>> join_vertically((1, [[0, 0, 1, 1, 3, 3, 0, 0], [0, 0, 7, 7, 9, 9, 0, 0], [0, 0, 11, 11, 0, 0, 0, 0], [0, 0, 13, 13, 0, 0, 0, 0]]))
(1, [[0, 0, 1, 1, 3, 3, 0, 0], [0, 0, 1, 1, 3, 3, 0, 0], [0, 0, 11, 11, 0, 0, 0, 0], [0, 0, 11, 11, 0, 0, 0, 0]])

The simplest possible case, 2 identical rows:

.@@. turns into: .11.
.@@.             .11.

>>> join_vertically((1, [[0, 1, 1, 0], [0, 3, 3, 0]]))
(1, [[0, 1, 1, 0], [0, 1, 1, 0]])

A more complicated one (diagonal):

@@.. should not be converted at all: 12..
.@@.                                 .34.
..@@                                 ..56

>>> join_vertically((1, [[1, 2, 0, 0], [0, 3, 4, 0], [0, 0, 5, 6]]))
(1, [[1, 2, 0, 0], [0, 3, 4, 0], [0, 0, 5, 6]])

Tests for simple_reduction
--------------------------

>>> simple_reduction((1, [[1, 1, 0, 0], [0, 3, 3, 0], [0, 0, 5, 5]]))
(1, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])

>>> simple_reduction((2, [[1, 1, 0, 0], [0, 3, 3, 0], [0, 0, 5, 5]]))
(2, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])

Tests for outer_bounds
----------------------

>>> outer_bounds(1, [[1, 1, 0, 0], [0, 3, 3, 0], [0, 0, 5, 5]])
(2, (0, 0), (1, 0))

>>> outer_bounds([1, 3], [[1, 1, 0, 0], [0, 3, 3, 0], [0, 0, 5, 5]])
(6, (0, 0), (2, 1))

>>> outer_bounds([1, 3, 5], [[1, 1, 0, 0], [0, 3, 3, 0], [0, 0, 5, 5]])
(12, (0, 0), (3, 2))

>>> outer_bounds([1, 2], [[1, 1], [2, 3]])
(None, (0, 0), (1, 1))

Tests for join
--------------

>>> join(1, 3, [[1, 1, 0, 0], [0, 3, 3, 0], [0, 0, 5, 5]])
[[1, 1, 1, 0], [1, 1, 1, 0], [0, 0, 5, 5]]

>>> join(1, 5, [[1, 1, 0, 0], [0, 3, 3, 0], [0, 0, 5, 5]])
[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]

Tests for cost
--------------

>>> cost([[1, 1, 0, 0], [0, 3, 3, 0], [0, 0, 5, 5]]) # cost = 10+2 + 10+2 + 10+2
36

>>> cost([[1, 1, 1, 0], [1, 1, 1, 0], [0, 0, 5, 5]]) # cost = 10+6 + 10+2
28

Tests for ids
-------------

>>> ids([[1, 1, 0, 0], [0, 3, 3, 0], [0, 0, 5, 5]])
[1, 3, 5]

Tests for flip_hz
-----------------

>>> flip_hz([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
[[3, 2, 1], [6, 5, 4], [9, 8, 7]]

>>> flip_hz(flip_hz([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

Tests for flip_vt
-----------------

>>> flip_vt([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
[[7, 8, 9], [4, 5, 6], [1, 2, 3]]

>>> flip_vt(flip_vt([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

Tests for rotate
----------------

>>> rotate([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
[[3, 6, 9], [2, 5, 8], [1, 4, 7]]

>>> rotate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
[[4, 8, 12], [3, 7, 11], [2, 6, 10], [1, 5, 9]]

Tests for unrotate
------------------

>>> unrotate(rotate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

Tests for variant_reduction
---------------------------

>>> _, f = variant_reduction((4, [[0, 0, 1, 1, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 9, 9, 11, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 0, 0, 0], [0, 0, 0, 0, 0, 15, 15, 17, 18, 19, 0, 0, 0, 0, 0, 0, 20, 20, 20, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 23, 24, 25, 26, 26, 26, 26, 30, 30, 32, 32, 32, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 36, 36, 36, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 36, 36, 36, 0, 0, 0, 0, 0, 0, 0, 0]]))
>>> cost(f)
90
>>> format(f)
'..AAAAAAAA............\n..AAAAAAAA......BBB...\n..AAAAAAAA......BBB...\n.......CCCCCCCCCBBB...\n.......CCCCCCCCC......\n.......CCCCCCCCC......\n'
